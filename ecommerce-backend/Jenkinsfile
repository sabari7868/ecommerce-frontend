pipeline {
  agent any
  environment {
    AWS_REGION = 'us-east-1'
    AWS_ACCOUNT_ID = '<your_aws_account_id>'
    ECR_REPO = 'ecommerce-backend'
    ECR_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
    IMAGE_TAG = "v${BUILD_NUMBER}"
    EC2_HOST = 'ec2-user@<ec2_public_ip>'
    SSH_CREDENTIALS_ID = 'ec2-key'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Build Image') {
      steps { sh 'docker build -t ${ECR_REPO}:${IMAGE_TAG} .' }
    }

    stage('Login & Push to ECR') {
      steps {
        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com && aws ecr describe-repositories --repository-names ${ECR_REPO} --region ${AWS_REGION} >/dev/null 2>&1 || aws ecr create-repository --repository-name ${ECR_REPO} --region ${AWS_REGION} && docker tag ${ECR_REPO}:${IMAGE_TAG} ${ECR_URI}:${IMAGE_TAG} && docker push ${ECR_URI}:${IMAGE_TAG}'
      }
    }

    stage('Deploy to EC2') {
      steps {
        sshagent (credentials: [env.SSH_CREDENTIALS_ID]) {
          sh 'ssh -o StrictHostKeyChecking=no ${EC2_HOST} "docker pull ${ECR_URI}:${IMAGE_TAG} && docker stop ecommerce || true && docker rm ecommerce || true && docker run -d --name ecommerce -p 5000:5000 ${ECR_URI}:${IMAGE_TAG}"'
        }
      }
    }
  }

  post {
    success { echo "Pipeline finished: image ${ECR_URI}:${IMAGE_TAG} deployed to ${EC2_HOST}" }
    failure { echo "Pipeline failed" }
  }
}
